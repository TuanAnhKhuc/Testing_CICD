name: CD - Terraform Deploy

on:
  workflow_dispatch:

env:
  AWS_PROFILE_NAME: AnhKT4

permissions:
  contents: read

concurrency:
  group: cd-terraform-${{ github.ref }}
  cancel-in-progress: false

jobs:
  plan:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'main' || github.ref_name == 'uat' && 'uat' || 'dev' }}
    outputs:
      tf_env: ${{ steps.setenv.outputs.tf_env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Terraform environment from branch
        id: setenv
        run: |
          case "${GITHUB_REF_NAME}" in
            dev)  echo "tf_env=dev"  >> "$GITHUB_OUTPUT" ;;
            uat)  echo "tf_env=uat"  >> "$GITHUB_OUTPUT" ;;
            main) echo "tf_env=main" >> "$GITHUB_OUTPUT" ;;
            *)    echo "Unsupported branch: ${GITHUB_REF_NAME}"; exit 1 ;;
          esac

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          {
            echo "[${{ env.AWS_PROFILE_NAME }}]"
            echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}"
            echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            echo "region=${{ secrets.AWS_REGION }}"
          } > ~/.aws/credentials
          echo "AWS_PROFILE=${{ env.AWS_PROFILE_NAME }}" >> "$GITHUB_ENV"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: infra
        run: terraform init -reconfigure

      - name: Select/Create workspace
        working-directory: infra
        run: |
          terraform workspace list | sed 's/*//g' | awk '{$1=$1};1' | grep -wq "${{ steps.setenv.outputs.tf_env }}" \
            || terraform workspace new "${{ steps.setenv.outputs.tf_env }}"
          terraform workspace select "${{ steps.setenv.outputs.tf_env }}"

      - name: Terraform Plan
        working-directory: infra
        run: |
          CLEAN_DB_PASS=$(printf "%s" "${{ secrets.DB_PASSWORD }}" | tr -d '\n' | tr -d '\r')
          if [ -z "$CLEAN_DB_PASS" ]; then
            echo "❌ DB_PASSWORD is empty! Please check environment secrets."
            exit 1
          fi
          terraform plan \
            -no-color \
            -var-file="envs/${{ steps.setenv.outputs.tf_env }}.tfvars" \
            -var="db_password=$CLEAN_DB_PASS" \
            > plan.txt

      - name: Upload plan.txt
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ steps.setenv.outputs.tf_env }}
          path: infra/plan.txt

  apply:
    runs-on: ubuntu-latest
    needs: plan
    environment: ${{ github.ref_name == 'main' && 'main' || github.ref_name == 'uat' && 'uat' || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          {
            echo "[${{ env.AWS_PROFILE_NAME }}]"
            echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}"
            echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            echo "region=${{ secrets.AWS_REGION }}"
          } > ~/.aws/credentials
          echo "AWS_PROFILE=${{ env.AWS_PROFILE_NAME }}" >> "$GITHUB_ENV"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: infra
        run: terraform init -reconfigure

      - name: Select Workspace
        working-directory: infra
        run: terraform workspace select "${{ needs.plan.outputs.tf_env }}"

      - name: Terraform Apply
        working-directory: infra
        run: |
          CLEAN_DB_PASS=$(printf "%s" "${{ secrets.DB_PASSWORD }}" | tr -d '\n' | tr -d '\r')
          if [ -z "$CLEAN_DB_PASS" ]; then
            echo "❌ DB_PASSWORD is empty! Please check environment secrets."
            exit 1
          fi
          terraform apply -auto-approve \
            -var-file="envs/${{ needs.plan.outputs.tf_env }}.tfvars" \
            -var="db_password=$CLEAN_DB_PASS"

      - name: Show outputs
        working-directory: infra
        run: terraform output -json
