name: CD - Terraform Deploy

on:
  workflow_dispatch:

env:
  AWS_PROFILE_NAME: AnhKT4

permissions:
  contents: read

concurrency:
  group: cd-terraform-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # === Job 1: Terraform Plan ===
  deploy:
    runs-on: ubuntu-latest
    # Map branch -> environment
    environment: ${{ github.ref_name == 'main' && 'main' || github.ref_name == 'uat' && 'uat' || 'dev' }}
    outputs:
      tf_env: ${{ steps.setenv.outputs.tf_env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Terraform environment from branch
        id: setenv
        run: |
          case "${GITHUB_REF_NAME}" in
            dev)  echo "TF_ENV=dev"  >> "$GITHUB_ENV" ;;
            uat)  echo "TF_ENV=uat"  >> "$GITHUB_ENV" ;;
            main) echo "TF_ENV=main" >> "$GITHUB_ENV" ;;
            *)    echo "Unsupported branch: ${GITHUB_REF_NAME}"; exit 1 ;;
          esac
          echo "tf_env=${TF_ENV}" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init (S3 backend)
        working-directory: infra
        run: terraform init -reconfigure

      - name: Select/Create workspace
        working-directory: infra
        run: |
          terraform workspace list | sed 's/*//g' | awk '{$1=$1};1' | grep -wq "${TF_ENV}" \
            || terraform workspace new "${TF_ENV}"
          terraform workspace select "${TF_ENV}"

      - name: Prepare secrets/env
        run: |
          CLEAN_DB_PASS=$(echo "${{ secrets.DB_PASSWORD }}" | tr -d '\n' | tr -d '\r')
          echo "CLEAN_DB_PASS=$CLEAN_DB_PASS" >> "$GITHUB_ENV"

      - name: Terraform Plan
        working-directory: infra
        run: |
          terraform plan \
            -no-color \
            -out=tfplan \
            -var-file="envs/${TF_ENV}.tfvars" \
            -var="db_password=${CLEAN_DB_PASS}"
          terraform show -no-color tfplan > plan.txt

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ steps.setenv.outputs.tf_env }}
          path: infra/plan.txt

  # === Job 2: Terraform Apply (requires manual approval) ===
  apply:
    runs-on: ubuntu-latest
    needs: deploy
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'uat' && 'uat' || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ needs.deploy.outputs.tf_env }}
          path: infra

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init (S3 backend)
        working-directory: infra
        run: terraform init -reconfigure

      - name: Select Workspace
        working-directory: infra
        run: terraform workspace select "${{ needs.deploy.outputs.tf_env }}"

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve tfplan

      - name: Show outputs (ALB / App URL)
        working-directory: infra
        run: terraform output -json
